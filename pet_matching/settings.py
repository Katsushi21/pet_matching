"""
Django settings for pet_matching project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'fqa9cf*%75g06y$d5(e@tx8^-((%^mh7$r)patevvc0(t@^arf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'matching.apps.MatchingConfig',
    'bootstrap4',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pet_matching.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins':[
                'bootstrap4.templatetags.bootstrap4',   # bootstrap4を使用する記述
            ]
        },
    },
]

WSGI_APPLICATION = 'pet_matching.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'pet_matching',
        'USER': os.environ.get(''),
        'PASSWORD': os.environ.get(''),
        'HOST': '',
        'PORT': '',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),  # アプリケーションがstaticディレクトリを認識するための記述
)


# 開発用ロギング設定
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 既存ロガーを無効にする

    # フィルターの設定
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },

    # フォーマッタの設定
    'formatters': {
        'dev': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '\t'.join(['%(asctime)s',  # ログの出力に「/」を挟む・記録時間の出力
                                 '[%(levelname)s]',  # ログレベルの出力
                                 '%(pathname)s(Line:%(lineno)d)',  # パスと行の出力
                                 '%(message)s',  # メッセージの出力
                                 ])
        }
    },

    # ハンドラの設定
    'handlers': {
        'console': {
            'level': 'DEBUG',  # DEBUG以上のレベルを取り扱う
            'filters': ['require_debug_true'],  # require_debug_trueのフィルタを適用
            'class': 'logging.StreamHandler',  # コンソールへ出力するハンドラであると示す
            'formatter': 'dev',  # devフォーマッタを適用
        },
    },

    # ロガーの設定
    'loggers': {

        # djangoが使用するロガー
        'django': {
            'handlers': ['console'],  # consoleハンドラを適用
            'level': 'INFO',
        },

        # このアプリケーションでデバッグログを出力
        'matching': {
            'handlers': ['console'],    # consoleハンドラを適用
            'level': 'DEBUG',
        },
    }
}
